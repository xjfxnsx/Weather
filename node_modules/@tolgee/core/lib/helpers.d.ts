import { FallbackGeneral, FallbackLanguageOption, FetchFn, TolgeeError } from './types';
import { EventEmitterInstance } from './Controller/Events/EventEmitter';
export declare function isPromise(value: unknown): value is Promise<unknown>;
export declare function valueOrPromise<T, R>(value: T | Promise<T>, callback: (value: T) => R): R | Promise<R>;
export declare function handleRegularOrAsyncErr<T>(onError: EventEmitterInstance<TolgeeError>, createError: (e: any) => TolgeeError, callback: () => Promise<T> | T): Promise<T> | T;
export declare function missingOptionError(option: string | string[]): string;
export declare function isObject(item: any): boolean;
export declare function getFallback(value: FallbackGeneral): string[] | undefined;
export declare function getFallbackArray(value: FallbackGeneral): string[];
export declare function getFallbackFromStruct(language: string, fallbackLanguage: FallbackLanguageOption): string[];
export declare function unique<T>(arr: T[]): T[];
export declare function sanitizeUrl(url: string | undefined): string | undefined;
export declare function getErrorMessage(error: any): string | undefined;
export declare const createFetchFunction: (fetchFn?: FetchFn) => FetchFn;
