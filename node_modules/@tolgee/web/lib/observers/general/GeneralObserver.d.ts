import { NsFallback, ObserverRunProps, Unwrapped, WrapperMiddleware, WrapperWrapProps, KeyPosition } from '@tolgee/core';
import { ElementMeta, TolgeeElement } from '../../types';
type RunProps = ObserverRunProps & {
    wrapper: WrapperMiddleware;
};
export declare function GeneralObserver(): Readonly<{
    run(props: RunProps): void;
    stop(): void;
    forEachElement(callback: (el: TolgeeElement, meta: ElementMeta) => void): void;
    highlight(key?: string, ns?: NsFallback): {
        unhighlight(): void;
    };
    findPositions(key?: string, ns?: NsFallback): KeyPosition[];
    unwrap(text: string): Unwrapped;
    wrap(props: WrapperWrapProps): string;
}>;
export type GeneralObserverType = ReturnType<typeof GeneralObserver>;
export {};
