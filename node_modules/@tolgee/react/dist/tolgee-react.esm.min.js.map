{"version":3,"file":"tolgee-react.esm.min.js","sources":["../src/useTolgeeSSR.ts","../src/TolgeeProvider.tsx","../src/GlobalContextPlugin.tsx","../src/useTolgeeContext.ts","../src/hooks.ts","../src/useTranslateInternal.ts","../src/useTranslate.ts","../src/tagsTools.tsx","../src/TBase.tsx","../src/T.tsx","../src/useTolgee.ts"],"sourcesContent":["import {\n  getTranslateProps,\n  TolgeeInstance,\n  TolgeeStaticData,\n} from '@tolgee/web';\nimport { useEffect, useMemo, useState } from 'react';\n\nfunction getTolgeeWithDeactivatedWrapper(\n  tolgee: TolgeeInstance\n): TolgeeInstance {\n  return {\n    ...tolgee,\n    t(...args) {\n      // @ts-ignore\n      const props = getTranslateProps(...args);\n      return tolgee.t({ ...props, noWrap: true });\n    },\n  };\n}\n\n/**\n * Updates tolgee static data and language, to be ready right away for the first render\n * and therefore compatible with SSR.\n *\n * It also ensures that the first render is done without wrapping and so it avoids\n * \"client different than server\" issues.\n * *\n * @param tolgeeInstance initialized Tolgee instance\n * @param language language that is obtained outside of Tolgee on the server and client\n * @param staticData static data for the language\n * @param enabled if set to false, no action is taken\n */\nexport function useTolgeeSSR(\n  tolgeeInstance: TolgeeInstance,\n  language?: string,\n  staticData?: TolgeeStaticData | undefined,\n  enabled = true\n) {\n  const [noWrappingTolgee] = useState(() =>\n    getTolgeeWithDeactivatedWrapper(tolgeeInstance)\n  );\n\n  const [initialRender, setInitialRender] = useState(enabled);\n\n  useEffect(() => {\n    setInitialRender(false);\n  }, []);\n\n  useMemo(() => {\n    if (enabled) {\n      // we have to prepare tolgee before rendering children\n      // so translations are available right away\n      // events emitting must be off, to not trigger re-render while rendering\n      tolgeeInstance.setEmitterActive(false);\n      tolgeeInstance.addStaticData(staticData);\n      tolgeeInstance.changeLanguage(language!);\n      tolgeeInstance.setEmitterActive(true);\n    }\n  }, [language, staticData, tolgeeInstance]);\n\n  useState(() => {\n    // running this function only on first render\n    if (!tolgeeInstance.isLoaded() && enabled) {\n      // warning user, that static data provided are not sufficient\n      // for proper SSR render\n      const missingRecords = tolgeeInstance\n        .getRequiredRecords(language)\n        .map(({ namespace, language }) =>\n          namespace ? `${namespace}:${language}` : language\n        )\n        .filter((key) => !staticData?.[key]);\n\n      // eslint-disable-next-line no-console\n      console.warn(\n        `Tolgee: Missing records in \"staticData\" for proper SSR functionality: ${missingRecords.map((key) => `\"${key}\"`).join(', ')}`\n      );\n    }\n  });\n\n  return initialRender ? noWrappingTolgee : tolgeeInstance;\n}\n","import React, { Suspense, useEffect, useState } from 'react';\nimport { TolgeeInstance, TolgeeStaticData } from '@tolgee/web';\nimport { ReactOptions, TolgeeReactContext } from './types';\nimport { useTolgeeSSR } from './useTolgeeSSR';\n\nexport const DEFAULT_REACT_OPTIONS: ReactOptions = {\n  useSuspense: true,\n};\n\nlet ProviderInstance: React.Context<TolgeeReactContext | undefined>;\n\nexport const getProviderInstance = () => {\n  if (!ProviderInstance) {\n    ProviderInstance = React.createContext<TolgeeReactContext | undefined>(\n      undefined\n    );\n  }\n\n  return ProviderInstance;\n};\n\nlet LAST_TOLGEE_INSTANCE: TolgeeInstance | undefined = undefined;\n\nexport type SSROptions = {\n  /**\n   * Hard set language to this value, use together with `staticData`\n   */\n  language?: string;\n  /**\n   * If provided, static data will be hard set to Tolgee cache for initial render\n   */\n  staticData?: TolgeeStaticData;\n};\n\nexport interface TolgeeProviderProps {\n  children?: React.ReactNode;\n  tolgee: TolgeeInstance;\n  options?: ReactOptions;\n  fallback?: React.ReactNode;\n  /**\n   * use this option if you use SSR\n   *\n   * You can pass staticData and language\n   * which will be set to tolgee instance for the initial render\n   *\n   * Don't switch between ssr and non-ssr dynamically\n   */\n  ssr?: SSROptions | boolean;\n}\n\nexport const TolgeeProvider: React.FC<TolgeeProviderProps> = ({\n  tolgee,\n  options,\n  children,\n  fallback,\n  ssr,\n}) => {\n  // prevent restarting tolgee unnecesarly\n  // however if the instance change on hot-reloading\n  // we want to restart\n  useEffect(() => {\n    if (LAST_TOLGEE_INSTANCE?.run !== tolgee.run) {\n      if (LAST_TOLGEE_INSTANCE) {\n        LAST_TOLGEE_INSTANCE.stop();\n      }\n      LAST_TOLGEE_INSTANCE = tolgee;\n      tolgee\n        .run()\n        .catch((e) => {\n          // eslint-disable-next-line no-console\n          console.error(e);\n        })\n        .finally(() => {\n          setLoading(false);\n        });\n    }\n  }, [tolgee]);\n\n  let tolgeeSSR = tolgee;\n\n  const { language, staticData } = (\n    typeof ssr !== 'object' ? {} : ssr\n  ) as SSROptions;\n  tolgeeSSR = useTolgeeSSR(tolgee, language, staticData, Boolean(ssr));\n\n  const [loading, setLoading] = useState(!tolgeeSSR.isLoaded());\n\n  const optionsWithDefault = { ...DEFAULT_REACT_OPTIONS, ...options };\n\n  const TolgeeProviderContext = getProviderInstance();\n\n  if (optionsWithDefault.useSuspense) {\n    return (\n      <TolgeeProviderContext.Provider\n        value={{ tolgee: tolgeeSSR, options: optionsWithDefault }}\n      >\n        {loading ? (\n          fallback\n        ) : (\n          <Suspense fallback={fallback || null}>{children}</Suspense>\n        )}\n      </TolgeeProviderContext.Provider>\n    );\n  }\n\n  return (\n    <TolgeeProviderContext.Provider\n      value={{ tolgee: tolgeeSSR, options: optionsWithDefault }}\n    >\n      {loading ? fallback : children}\n    </TolgeeProviderContext.Provider>\n  );\n};\n","import type { TolgeePlugin } from '@tolgee/web';\nimport { DEFAULT_REACT_OPTIONS } from './TolgeeProvider';\nimport type { ReactOptions, TolgeeReactContext } from './types';\n\nlet globalContext: TolgeeReactContext | undefined;\n\nexport const GlobalContextPlugin =\n  (options?: Partial<ReactOptions>): TolgeePlugin =>\n  (tolgee) => {\n    globalContext = {\n      tolgee,\n      options: { ...DEFAULT_REACT_OPTIONS, ...options },\n    };\n    return tolgee;\n  };\n\nexport function getGlobalContext() {\n  return globalContext;\n}\n","import { useContext } from 'react';\nimport { getGlobalContext } from './GlobalContextPlugin';\nimport { getProviderInstance } from './TolgeeProvider';\n\nexport const useTolgeeContext = () => {\n  const TolgeeProviderContext = getProviderInstance();\n  const context = useContext(TolgeeProviderContext) || getGlobalContext();\n  if (!context) {\n    throw new Error(\n      \"Couldn't find tolgee instance, did you forgot to use `TolgeeProvider`?\"\n    );\n  }\n  return context;\n};\n","import { useCallback, useState } from 'react';\n\nexport const useRerender = () => {\n  const [instance, setCounter] = useState(0);\n\n  const rerender = useCallback(() => {\n    setCounter((num) => num + 1);\n  }, [setCounter]);\n  return { instance, rerender };\n};\n","import { useCallback, useEffect, useRef } from 'react';\nimport {\n  SubscriptionSelective,\n  TranslateProps,\n  NsFallback,\n  getFallbackArray,\n  getFallback,\n} from '@tolgee/web';\n\nimport { useTolgeeContext } from './useTolgeeContext';\nimport { ReactOptions } from './types';\nimport { useRerender } from './hooks';\n\nexport const useTranslateInternal = (\n  ns?: NsFallback,\n  options?: ReactOptions\n) => {\n  const { tolgee, options: defaultOptions } = useTolgeeContext();\n  const namespaces = getFallback(ns);\n  const namespacesJoined = getFallbackArray(namespaces).join(':');\n\n  const currentOptions = {\n    ...defaultOptions,\n    ...options,\n  };\n\n  // dummy state to enable re-rendering\n  const { rerender, instance } = useRerender();\n\n  const subscriptionRef = useRef<SubscriptionSelective>();\n\n  const subscriptionQueue = useRef([] as NsFallback[]);\n  subscriptionQueue.current = [];\n\n  const subscribeToNs = (ns: NsFallback) => {\n    subscriptionQueue.current.push(ns);\n    subscriptionRef.current?.subscribeNs(ns);\n  };\n\n  const isLoaded = tolgee.isLoaded(namespaces);\n\n  useEffect(() => {\n    const subscription = tolgee.onNsUpdate(rerender);\n    subscriptionRef.current = subscription;\n    subscription.subscribeNs(namespaces);\n    subscriptionQueue.current.forEach((ns) => {\n      subscription!.subscribeNs(ns);\n    });\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [namespacesJoined, tolgee]);\n\n  useEffect(() => {\n    tolgee.addActiveNs(namespaces);\n    return () => tolgee.removeActiveNs(namespaces);\n  }, [namespacesJoined, tolgee]);\n\n  const t = useCallback(\n    (props: TranslateProps<any>) => {\n      const fallbackNs = props.ns ?? namespaces?.[0];\n      subscribeToNs(fallbackNs);\n      return tolgee.t({ ...props, ns: fallbackNs }) as any;\n    },\n    [tolgee, instance]\n  );\n\n  if (currentOptions.useSuspense && !isLoaded) {\n    throw tolgee.addActiveNs(namespaces, true);\n  }\n\n  return { t, isLoading: !isLoaded };\n};\n","import { useCallback } from 'react';\nimport {\n  TFnType,\n  getTranslateProps,\n  DefaultParamType,\n  TranslationKey,\n} from '@tolgee/web';\n\nimport { useTranslateInternal } from './useTranslateInternal';\nimport { ReactOptions } from './types';\n\nexport interface UseTranslateResult {\n  t: TFnType<DefaultParamType, string, TranslationKey>;\n  isLoading: boolean;\n}\n\nexport const useTranslate = (\n  ns?: string[] | string,\n  options?: ReactOptions\n): UseTranslateResult => {\n  const { t: tInternal, isLoading } = useTranslateInternal(ns, options);\n\n  const t = useCallback(\n    (...params: any) => {\n      // @ts-ignore\n      const props = getTranslateProps(...params);\n      return tInternal(props);\n    },\n    [tInternal]\n  );\n\n  return { t, isLoading };\n};\n","import { TranslateParams } from '@tolgee/web';\nimport React from 'react';\n\nimport { ParamsTags } from './types';\n\nfunction unwrapSingleElementArray(value: any) {\n  if (Array.isArray(value) && value.length === 1) {\n    return value[0];\n  } else {\n    return value;\n  }\n}\n\nexport const wrapTagHandlers = (\n  params: TranslateParams<ParamsTags> | undefined\n) => {\n  if (!params) {\n    return undefined;\n  }\n\n  const result: any = {};\n\n  Object.entries(params || {}).forEach(([key, value]) => {\n    if (typeof value === 'function') {\n      result[key] = (chunk: any) => {\n        return value(addReactKeys(chunk));\n      };\n    } else if (React.isValidElement(value as any)) {\n      const el = value as React.ReactElement;\n      result[key] = (chunk: any) => {\n        return el.props.children === undefined && chunk?.length\n          ? React.cloneElement(el, {}, addReactKeys(chunk))\n          : React.cloneElement(el);\n      };\n    } else {\n      result[key] = value;\n    }\n  });\n\n  return result;\n};\n\nexport const addReactKeys = (\n  children: React.ReactNode | React.ReactNode[] | undefined\n) => {\n  const val = unwrapSingleElementArray(children);\n  if (Array.isArray(val)) {\n    return val.map((item, i) => (\n      <React.Fragment key={i}>{item}</React.Fragment>\n    ));\n  } else {\n    return val;\n  }\n};\n","import React from 'react';\nimport { addReactKeys, wrapTagHandlers } from './tagsTools';\nimport type { PropsWithKeyName, TBaseInterface } from './types';\n\nexport const TBase: TBaseInterface = (props) => {\n  const key = (props as PropsWithKeyName).keyName || props.children;\n  if (key === undefined) {\n    // eslint-disable-next-line no-console\n    console.error('T component: keyName not defined');\n  }\n  const defaultValue =\n    props.defaultValue ||\n    ((props as PropsWithKeyName).keyName ? props.children : undefined);\n\n  const translation = addReactKeys(\n    props.t({\n      key: key!,\n      params: wrapTagHandlers(props.params),\n      defaultValue,\n      noWrap: props.noWrap,\n      ns: props.ns,\n      language: props.language,\n    })\n  );\n\n  return <>{translation}</>;\n};\n","import React from 'react';\nimport { ParamsTags, TProps } from './types';\n\nimport { useTranslateInternal } from './useTranslateInternal';\nimport { TFnType } from '@tolgee/web';\nimport { TBase } from './TBase';\n\ninterface TInterface {\n  (props: TProps): JSX.Element;\n}\n\nexport const T: TInterface = (props) => {\n  const { t } = useTranslateInternal();\n\n  return <TBase t={t as TFnType<ParamsTags>} {...props} />;\n};\n","import { TolgeeEvent, TolgeeInstance } from '@tolgee/web';\nimport { useEffect } from 'react';\nimport { useRerender } from './hooks';\nimport { useTolgeeContext } from './useTolgeeContext';\n\nexport const useTolgee = (events?: TolgeeEvent[]): TolgeeInstance => {\n  const { tolgee } = useTolgeeContext();\n\n  const { rerender } = useRerender();\n\n  useEffect(() => {\n    const listeners = events?.map((e) => tolgee.on(e, rerender));\n    return () => {\n      listeners?.forEach((listener) => listener.unsubscribe());\n    };\n  }, [events?.join(':')]);\n\n  return tolgee;\n};\n"],"names":["useTolgeeSSR","tolgeeInstance","language","staticData","enabled","noWrappingTolgee","useState","getTolgeeWithDeactivatedWrapper","tolgee","Object","assign","t","args","props","getTranslateProps","noWrap","initialRender","setInitialRender","useEffect","useMemo","setEmitterActive","addStaticData","changeLanguage","isLoaded","missingRecords","getRequiredRecords","map","namespace","filter","key","console","warn","join","DEFAULT_REACT_OPTIONS","useSuspense","ProviderInstance","getProviderInstance","React","createContext","undefined","LAST_TOLGEE_INSTANCE","TolgeeProvider","options","children","fallback","ssr","run","stop","catch","e","error","finally","setLoading","tolgeeSSR","Boolean","loading","optionsWithDefault","TolgeeProviderContext","createElement","Provider","value","Suspense","globalContext","GlobalContextPlugin","useTolgeeContext","context","useContext","Error","useRerender","instance","setCounter","rerender","useCallback","num","useTranslateInternal","ns","defaultOptions","namespaces","getFallback","namespacesJoined","getFallbackArray","currentOptions","subscriptionRef","useRef","subscriptionQueue","current","subscription","onNsUpdate","subscribeNs","forEach","unsubscribe","addActiveNs","removeActiveNs","fallbackNs","_a","push","subscribeToNs","isLoading","useTranslate","tInternal","params","wrapTagHandlers","result","entries","chunk","addReactKeys","isValidElement","el","length","cloneElement","val","Array","isArray","item","i","Fragment","TBase","keyName","defaultValue","translation","T","useTolgee","events","listeners","on","listener"],"mappings":"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"}